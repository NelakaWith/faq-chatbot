name: Deploy

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Optional tag to deploy (e.g. v1.2.3). If blank the workflow will deploy the latest GitHub Release."
        required: false
        default: ""

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build frontend
        working-directory: dev/frontend
        run: |
          npm install
          npm run build

      - name: Resolve ref to deploy
        id: resolve_ref
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ] && [ "${{ github.event.inputs.tag }}" != "" ]; then
            REF="${{ github.event.inputs.tag }}"
          else
            REF=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)
          fi
          echo "Resolved ref: $REF"
          echo "ref=$REF" >> $GITHUB_OUTPUT

      - name: ðŸ”– Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ref = process.env.DEPLOY_REF || context.sha;
            const response = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref,
              required_contexts: [],
              environment: 'production',
              description: 'Deploy to Droplet',
              auto_merge: false,
            });
            core.setOutput('deployment_id', response.data.id);
        env:
          DEPLOY_REF: ${{ steps.resolve_ref.outputs.ref }}

      - name: Copy files to droplet via SSH
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: .
          target: ~/faq-chatbot
          rm: true

      - name: Run deploy script on droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            cd ~/faq-chatbot/dev/backend
            npm install
            pm2 restart faq-chatbot-backend || pm2 start server.js --name faq-chatbot-backend
            cd ~/faq-chatbot/dev/frontend
            npm install
            npm run build

            # Ensure NGINX live folder exists and is owned by www-data
            sudo mkdir -p /var/www/faq-chatbot
            sudo chown -R www-data:www-data /var/www/faq-chatbot

            # Copy build to NGINX live folder
            sudo rm -rf /var/www/faq-chatbot/* || true
            sudo cp -r dist/* /var/www/faq-chatbot/
            sudo chown -R www-data:www-data /var/www/faq-chatbot

            # Reload nginx
            sudo systemctl reload nginx || true
        env:
          DEPLOYMENT_ID: ${{ steps.create_deployment.outputs.deployment_id }}

      - name: Update GitHub Deployment status
        if: ${{ always() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOYMENT_ID: ${{ steps.create_deployment.outputs.deployment_id }}
        run: |
          # Determine success by inspecting the previous step's outcome from the workflow runtime
          if [ ${{ job.status }} = 'success' ]; then
            STATE="success"
          else
            STATE="failure"
          fi
          PAYLOAD=$(jq -n --arg state "$STATE" --arg description "Deployment $STATE" '{state:$state, description:$description}')
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses" -d "$PAYLOAD"
