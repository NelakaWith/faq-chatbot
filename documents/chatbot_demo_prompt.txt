# Prompt to Build the Chatbot Demo (Rule-based + Legal Text Search)

Build a **JavaScript-based chatbot demo** with:

## Requirements
1. **Backend**:
   - Use **Node.js + Express**.
   - Load **FAQ data** and **legal document data** from JSON files (`faq.json` and `legal.json`).
   - Implement **Fuse.js fuzzy search**:
     - First search in FAQ.
     - If no match, search in legal documents.
     - If still nothing, return a fallback response.
   - Expose a single POST `/chat` endpoint that takes `{ "message": "..." }` and returns JSON.

2. **Frontend**:
   - Use **Vue 3 (Composition API)** or **React** (your choice).
   - A **simple chat widget** with:
     - User input box.
     - Chat bubbles for user & bot.
     - Scrollable message history.
   - Connect frontend to backend with `fetch` (no external chat libraries).

3. **Sample Data**:
   - Provide **at least 10 FAQ items** (covering hours, contact, pricing, refund, delivery, etc.).
   - Provide **at least 10 legal document sections** (covering payments, penalties, cancellation, privacy, liability, etc.).
   - Make the legal text a few sentences long each, so it looks realistic.

4. **Output**:
   - Provide the complete project structure:
     ```
     chatbot-demo/
      ├─ backend/
      │   ├─ server.js
      │   ├─ data/faq.json
      │   ├─ data/legal.json
      │   └─ package.json
      └─ frontend/
          ├─ src/App.vue (or App.jsx)
          ├─ src/components/ChatWidget.vue (or ChatWidget.jsx)
          ├─ package.json
          └─ index.html
     ```
   - Include instructions to run backend (`npm install && node server.js`) and frontend (`npm install && npm run dev`).
   - Make sure the frontend points to `http://localhost:3000/chat`.

## Goal
A **working chatbot demo** that:
- Matches FAQs with fuzzy search.
- Falls back to searching legal documents.
- Provides a simple UI for demo purposes.
